{"version":3,"sources":["assets/path.svg","assets/code.svg","assets/github.svg","assets/profile.svg","components/node.js","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/visualizer.js","App.js","index.js"],"names":["module","exports","Node","props","state","handleMouseDown","bind","handleMouseEnter","handleMouseLeave","nextProps","isClearingWalls","this","setState","isRunning","isEnd","isStart","isWall","mouseDown","isMovingStart","isMovingEnd","row","col","customClass","id","className","onMouseDown","onMouseEnter","onMouseLeave","Component","dijkstra","startNode","finishNode","grid","diagonal","isAstar","distance","nodes","node","push","getAllNodes","pq","TinyQueue","a","b","visitedNodes","length","cur","pop","Infinity","isVisited","adjacentNodes","getUnvisitedNeighbors","param","heuristic","previousNode","data","neighbors","directions","dir","newRow","newCol","Visualizer","startRow","startCol","endRow","endCol","algorithm","pathLength","visited","clearBoard","runPathfinder","getShortestPath","toggleIsRunning","clearGrid","handleSelect","getInitialGrid","createNode","handleChange","eventKey","e","target","split","slice","newGrid","ref","refs","handleMouseUp","Math","abs","endNode","window","performance","now","stack","dfs","queue","shift","bfs","shortestPath","animate","unshift","i","setTimeout","animateShortestPath","nodeClassName","document","getElementById","isNode","algo","info","onMouseUp","preventDefault","Navbar","bg","variant","expand","Brand","alt","src","pathImg","width","height","Toggle","aria-controls","Spinner","animation","Collapse","Nav","NavDropdown","title","onSelect","Item","Button","onClick","href","Image","codeImg","githubImg","map","rowIdx","key","nodeIdx","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2066a0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/path.432f50f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/code.6e2a4896.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.9b2559dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.4152e254.svg\";","import React, { Component } from \"react\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.isClearingWalls) {\n      this.setState({\n        ...nextProps,\n      });\n    }\n  }\n\n  handleMouseDown() {\n    if (this.props.isRunning) return;\n    if (!(this.state.isEnd || this.state.isStart)) {\n      this.setState({\n        isWall: !this.state.isWall,\n      });\n    }\n  }\n\n  handleMouseEnter() {\n    if (this.props.isRunning) return;\n    if (this.props.mouseDown) {\n      if (this.props.isMovingStart && !this.state.isEnd) {\n        this.setState({\n          isStart: true,\n          isWall: false,\n        });\n      } else if (this.props.isMovingEnd && !this.state.isStart) {\n        this.setState({\n          isEnd: true,\n          isWall: false,\n        });\n      } else {\n        this.handleMouseDown();\n      }\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.props.isRunning) return;\n    if (this.props.isMovingStart) {\n      this.setState({\n        isStart: false,\n      });\n    }\n\n    if (this.props.isMovingEnd) {\n      this.setState({\n        isEnd: false,\n      });\n    }\n  }\n\n  render() {\n    const { row, col, isEnd, isStart, isWall } = this.state;\n\n    const customClass = isEnd\n      ? \"node-end\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${customClass}`}\n        onMouseDown={this.handleMouseDown}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      ></td>\n    );\n  }\n}\n\nexport default Node;\n","import TinyQueue from \"tinyqueue\";\r\n\r\nexport default function dijkstra(\r\n  startNode,\r\n  finishNode,\r\n  grid,\r\n  diagonal,\r\n  isAstar\r\n) {\r\n  // Set the start node distance to 0\r\n  startNode.distance = 0;\r\n\r\n  // Insert all nodes in a min-heap\r\n  const nodes = getAllNodes(grid);\r\n  let pq = new TinyQueue(nodes, function (a, b) {\r\n    return a.distance - b.distance;\r\n  });\r\n\r\n  // Visited nodes\r\n  let visitedNodes = [];\r\n\r\n  while (pq.length) {\r\n    // get the closest nodes\r\n    let cur = pq.pop();\r\n\r\n    // Don't traverse a wall\r\n    if (cur.isWall) continue;\r\n\r\n    // No path exists\r\n    if (cur.distance === Infinity) return visitedNodes;\r\n\r\n    // Push the nodes in the visited set\r\n    cur.isVisited = true;\r\n    visitedNodes.push(cur);\r\n\r\n    const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n    for (const node of adjacentNodes) {\r\n      // Modify the algorith to move in the direction of end node if A* is selected\r\n      const param = isAstar ? node.heuristic : cur.distance;\r\n      // Relaxing the edges\r\n      if (node.distance > param + 1) {\r\n        node.distance = param + 1;\r\n        node.previousNode = cur;\r\n\r\n        // Heapify\r\n        pq = new TinyQueue(pq.data, function (a, b) {\r\n          return a.distance - b.distance;\r\n        });\r\n\r\n        if (node.isEnd) {\r\n          return visitedNodes;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function dfs(startNode, finishNode, grid, diagonal) {\r\n  const visitedNodes = [];\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  while (stack.length) {\r\n    const cur = stack.pop();\r\n\r\n    if (cur.isEnd) return visitedNodes;\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        stack.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function bfs(startNode, finishNode, grid, diagonal) {\r\n  const visitedNodes = [];\r\n  const queue = [];\r\n\r\n  queue.push(startNode);\r\n\r\n  while (queue.length) {\r\n    const cur = queue.shift();\r\n    if (cur.isEnd) return visitedNodes;\r\n\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","import React, { Component } from \"react\";\nimport Node from \"./node\";\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  Button,\n  Spinner,\n  ToggleButton,\n  Image,\n} from \"react-bootstrap\";\nimport dijkstra from \"../algorithms/dijkstra\";\nimport dfs from \"../algorithms/dfs\";\nimport bfs from \"../algorithms/bfs\";\nimport pathImg from \"../assets/path.svg\";\nimport profileImg from \"../assets/profile.svg\";\nimport codeImg from \"../assets/code.svg\";\nimport githubImg from \"../assets/github.svg\";\n\nclass Visualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseDown: false,\n      startRow: 7,\n      startCol: 15,\n      endRow: 10,\n      endCol: 30,\n      algorithm: \"1\",\n      isRunning: false,\n      isClearingWalls: false,\n      isMovingStart: false,\n      isMovingEnd: false,\n      diagonal: false,\n      pathLength: \"-\",\n      visited: \"-\",\n    };\n\n    this.clearBoard = this.clearBoard.bind(this);\n    this.runPathfinder = this.runPathfinder.bind(this);\n    this.getShortestPath = this.getShortestPath.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n    this.clearGrid = this.clearGrid.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.getInitialGrid = this.getInitialGrid.bind(this);\n    this.createNode = this.createNode.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  toggleIsRunning() {\n    this.setState({ isRunning: !this.state.isRunning });\n  }\n\n  handleChange() {\n    this.setState({\n      diagonal: !this.state.diagonal,\n    });\n  }\n\n  handleSelect(eventKey) {\n    this.setState({\n      algorithm: eventKey,\n    });\n  }\n\n  handleMouseDown(e) {\n    if (this.state.isRunning) return;\n    this.clearGrid();\n    const [row, col] = e.target.id.split(\"-\").slice(1);\n    if (row == this.state.startRow && col == this.state.startCol) {\n      this.setState({\n        isMovingStart: true,\n      });\n    }\n\n    if (row == this.state.endRow && col == this.state.endCol) {\n      this.setState({\n        isMovingEnd: true,\n      });\n    }\n    this.setState({ mouseDown: true, isClearingWalls: false });\n  }\n\n  handleMouseUp() {\n    if (this.state.isRunning) return;\n    this.clearGrid();\n    this.setState({\n      mouseDown: false,\n      isClearingWalls: false,\n      isMovingStart: false,\n      isMovingEnd: false,\n    });\n\n    let startRow = this.state.startRow,\n      startCol = this.state.startCol,\n      endRow = this.state.endRow,\n      endCol = this.state.endCol;\n\n    const newGrid = this.state.grid.slice();\n    for (let ref in this.refs) {\n      const { row, col, isStart, isEnd } = this.refs[ref].state;\n      newGrid[row][col] = this.refs[ref].state;\n      startRow = isStart ? row : startRow;\n      startCol = isStart ? col : startCol;\n      endRow = isEnd ? row : endRow;\n      endCol = isEnd ? col : endCol;\n    }\n\n    this.setState({\n      grid: newGrid,\n      startRow,\n      startCol,\n      endRow,\n      endCol,\n    });\n  }\n\n  handleMouseLeave() {\n    if (this.state.isRunning) return;\n    if (this.state.mouseDown) {\n      this.handleMouseUp();\n    }\n  }\n\n  // Creating an initial grid\n  getInitialGrid() {\n    const grid = [];\n\n    for (let row = 0; row < 20; row++) {\n      const cur = [];\n\n      for (let col = 0; col < 50; col++) {\n        cur.push(this.createNode(row, col));\n      }\n\n      grid.push(cur);\n    }\n    return grid;\n  }\n\n  // Creating each node\n  createNode(row, col) {\n    const { startRow, startCol, endRow, endCol } = this.state;\n    let node = {\n      row,\n      col,\n      isStart: row === startRow && col === startCol,\n      isEnd: row === endRow && col === endCol,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      mouseDown: false,\n      heuristic: this.state.diagonal\n        ? (endRow - row) ** 2 + (endCol - col) ** 2\n        : Math.abs(endRow - row) + Math.abs(endCol - col),\n    };\n\n    if (typeof startRow !== \"undefined\") {\n      node.isStart = row === startRow && col === startCol;\n      node.isEnd = row === endRow && col === endCol;\n    }\n\n    return node;\n  }\n\n  clearBoard() {\n    if (this.state.isRunning) return;\n    this.clearGrid();\n    const { startRow, startCol, endRow, endCol, isRunning } = this.state;\n    const newGrid = this.getInitialGrid();\n    this.setState({ isClearingWalls: true, grid: newGrid });\n  }\n\n  runPathfinder() {\n    if (this.state.isRunning) return;\n    this.clearGrid();\n    this.toggleIsRunning();\n    const {\n      algorithm,\n      startRow,\n      startCol,\n      endRow,\n      endCol,\n      grid,\n      diagonal,\n    } = this.state;\n    const startNode = grid[startRow][startCol],\n      endNode = grid[endRow][endCol];\n    let visitedNodes;\n\n    const startTime = window.performance.now();\n    switch (algorithm) {\n      case \"1\":\n        visitedNodes = dijkstra(startNode, endNode, grid, diagonal);\n        break;\n      case \"2\":\n        // A* is a simple modification of dijkstra\n        const isAstar = true;\n        visitedNodes = dijkstra(startNode, endNode, grid, diagonal, isAstar);\n        break;\n      case \"3\":\n        visitedNodes = dfs(startNode, endNode, grid, diagonal);\n        break;\n      case \"4\":\n        visitedNodes = bfs(startNode, endNode, grid, diagonal);\n        break;\n      default:\n    }\n\n    const shortestPath = this.getShortestPath(endNode);\n    shortestPath.push(\"end\");\n\n    const endTime = window.performance.now();\n    this.setState({\n      visited: visitedNodes.length,\n      pathLength: shortestPath.length,\n    });\n    this.animate(visitedNodes, shortestPath);\n  }\n\n  getShortestPath(endNode) {\n    const shortestPath = [];\n    let cur = endNode;\n    while (cur !== null) {\n      shortestPath.unshift(cur);\n      cur = cur.previousNode;\n    }\n    return shortestPath;\n  }\n\n  animate(visitedNodes, shortestPath) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPath);\n        }, 5 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`\n        ).className;\n        if (\n          nodeClassName !== \"node node-start\" &&\n          nodeClassName !== \"node node-end\"\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(shortestPath) {\n    for (let i = 0; i < shortestPath.length; i++) {\n      if (shortestPath[i] === \"end\") {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 40);\n      } else {\n        setTimeout(() => {\n          const node = shortestPath[i];\n          const nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`\n          ).className;\n          if (\n            nodeClassName !== \"node node-start\" &&\n            nodeClassName !== \"node node-end\"\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node node-shortest-path\";\n          }\n        }, i * 30);\n      }\n    }\n  }\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      this.setState({\n        pathLength: \"-\",\n        visited: \"-\",\n      });\n      const { startRow, startCol, endRow, endCol } = this.state;\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`\n          ).className;\n          if (\n            nodeClassName !== \"node node-start\" &&\n            nodeClassName !== \"node node-end\" &&\n            nodeClassName !== \"node node-wall\"\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              \"node\";\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = this.state.diagonal\n              ? (endRow - node.row) ** 2 + (endCol - node.col) ** 2\n              : Math.abs(endRow - node.row) + Math.abs(endCol - node.col);\n          }\n          if (nodeClassName === \"node node-end\") {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = 0;\n            node.previousNode = null;\n          }\n          if (nodeClassName === \"node node-start\") {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.heuristic = this.state.diagonal\n              ? (endRow - node.row) ** 2 + (endCol - node.col) ** 2\n              : Math.abs(endRow - node.row) + Math.abs(endCol - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseDown,\n      isClearingWalls,\n      isMovingStart,\n      isMovingEnd,\n      isRunning,\n      algorithm,\n      diagonal,\n      pathLength,\n      visited,\n    } = this.state;\n\n    const algoKeys = {\n      \"1\": \"Dijkstra's\",\n      \"2\": \"A-star\",\n      \"3\": \"Depth-first search\",\n      \"4\": \"Breadth-first search\",\n    };\n\n    const algo = algoKeys[algorithm];\n    const infoText = {\n      \"1\":\n        \"The Dijkstra's algorithm is a greedy algorithm which guarantees the shortest path from one node to all other nodes in a weighted graph.\",\n      \"2\":\n        \"The A-star algorithm is a smarter version of Dijkstra's. It specializes in finding the shortest path from a start node to a finish node by moving in the direction of the finish node.\",\n      \"3\":\n        \"The Depth-first search algorithm is a graph traversal algorithm which prioritizes exploring the deeper nodes.\",\n      \"4\":\n        \"The Breadth-first search algorithm is a graph traversal algorithm which prioritizes exploring the neighboring nodes.\",\n    };\n\n    const info = infoText[algorithm];\n\n    return (\n      <div\n        onMouseUp={(e) => {\n          e.preventDefault();\n          this.handleMouseUp();\n        }}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          this.handleMouseDown(e);\n        }}\n        onMouseLeave={(e) => {\n          e.preventDefault();\n          this.handleMouseLeave();\n        }}\n      >\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand>\n            <img\n              alt=\"\"\n              src={pathImg}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{\" \"}\n            Pathfinding Algorithm Visualizer\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          {isRunning ? (\n            <>\n              <span className=\"info-text\">Visualizing</span>\n              <Spinner animation=\"border\" variant=\"light\" />\n            </>\n          ) : (\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <NavDropdown\n                  variant=\"Info\"\n                  title=\"Algorithm\"\n                  id=\"basic-nav-dropdown\"\n                  onSelect={(eventKey) => {\n                    this.handleSelect(eventKey);\n                  }}\n                >\n                  <NavDropdown.Item eventKey=\"1\">Dijkstra's</NavDropdown.Item>\n                  <NavDropdown.Item eventKey=\"2\">A*</NavDropdown.Item>\n                  <NavDropdown.Item eventKey=\"3\">\n                    Depth-first search\n                  </NavDropdown.Item>\n                  <NavDropdown.Item eventKey=\"4\">\n                    Breadth-first search\n                  </NavDropdown.Item>\n                </NavDropdown>\n\n                <Button variant=\"info\" onClick={this.runPathfinder}>\n                  Run -> {algo}\n                </Button>\n                <Button onClick={this.clearBoard} variant=\"outline-danger\">\n                  Clear walls and board\n                </Button>\n\n                <Button onClick={this.clearGrid} variant=\"outline-warning\">\n                  Clear board\n                </Button>\n                <Button\n                  variant={diagonal ? \"secondary\" : \"light\"}\n                  onClick={this.handleChange}\n                >\n                  {diagonal\n                    ? \"Lateral traversal only\"\n                    : \"Allow diagonal traversal\"}\n                </Button>\n              </Nav>\n              <div className=\"links\">\n                <a href=\"https://github.com/paspunoor/pathfinding_visualizer\">\n                  <Image alt=\"code\" className=\"icons\" src={codeImg} />\n                </a>\n                <a href=\"https://github.com/paspunoor\">\n                  <Image alt=\"github\" className=\"icons\" src={githubImg} />\n                </a>\n                {/* <a>\n                  <Image alt=\"profile\" className=\"icons\" src={profileImg} />\n                </a> */}\n              </div>\n            </Navbar.Collapse>\n          )}\n        </Navbar>\n        <div className=\"panel\">\n          <div className=\"info\">\n            <div className=\"tutorial\">\n              Welcome to the Pathfinding Algorithm Visualizer! Drag and drop the\n              Spaceship and the Planet anywhere on the grid. You can add\n              asteroids by clicking and dragging on an empty cell. Choose an\n              algorithm from the dropdown list above and click on <b>Run</b> to\n              watch the Spaceship find it's way to the Planet. Tip: Click on\n              Clear walls and board if you lose your Spaceship or Planet.\n            </div>\n            <div className=\"algo-info\">{info}</div>\n          </div>\n          <div className=\"metrics\">\n            <span className=\"stat visited\">{\"NODES VISITED : \" + visited}</span>\n            <span className=\"stat path\">\n              {\"PATH LENGTH : \" + (pathLength - 2 || pathLength)}\n            </span>\n          </div>\n        </div>\n        <table className=\"grid\">\n          <tbody>\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const {\n                      row,\n                      col,\n                      isEnd,\n                      isStart,\n                      isWall,\n                      isVisited,\n                      distance,\n                      previousNode,\n                    } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        row={row}\n                        col={col}\n                        isEnd={isEnd}\n                        isStart={isStart}\n                        isWall={isWall}\n                        isVisited={isVisited}\n                        mouseDown={mouseDown}\n                        distance={distance}\n                        previousNode={previousNode}\n                        ref={row + \":\" + col}\n                        isClearingWalls={isClearingWalls}\n                        isMovingStart={isMovingStart}\n                        isMovingEnd={isMovingEnd}\n                        isRunning={isRunning}\n                      ></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from \"react\";\r\nimport \"./css/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Visualizer from \"./components/visualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Visualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}