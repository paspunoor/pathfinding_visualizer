{"version":3,"sources":["assets/path.svg","assets/code.svg","assets/github.svg","assets/profile.svg","components/node.js","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/visualizer.js","App.js","index.js"],"names":["module","exports","Node","props","state","handleMouseDown","bind","handleMouseEnter","handleMouseLeave","nextProps","isClearingWalls","this","setState","isRunning","isEnd","isStart","isWall","mouseDown","isMovingStart","isMovingEnd","row","col","customClass","id","className","onMouseDown","onMouseEnter","onMouseLeave","Component","dijkstra","startNode","finishNode","grid","diagonal","isAstar","distance","nodes","node","push","getAllNodes","pq","TinyQueue","a","b","visitedNodes","length","cur","pop","Infinity","isVisited","adjacentNodes","getUnvisitedNeighbors","param","heuristic","previousNode","data","neighbors","directions","dir","newRow","newCol","Visualizer","startRow","startCol","endRow","endCol","algorithm","pathLength","visited","clearBoard","runPathfinder","getShortestPath","toggleIsRunning","clearGrid","handleSelect","getInitialGrid","createNode","handleChange","eventKey","e","target","split","slice","newGrid","ref","refs","handleMouseUp","Math","abs","endNode","window","performance","now","stack","dfs","queue","shift","bfs","shortestPath","animate","unshift","i","setTimeout","animateShortestPath","nodeClassName","document","getElementById","isNode","algo","info","onMouseUp","preventDefault","Navbar","bg","variant","expand","Brand","alt","src","pathImg","width","height","Toggle","aria-controls","Spinner","animation","Collapse","Nav","NavDropdown","title","onSelect","Item","Button","onClick","href","Image","codeImg","githubImg","map","rowIdx","key","nodeIdx","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2066a0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/path.432f50f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/code.6e2a4896.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.9b2559dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.4152e254.svg\";","import React, { Component } from \"react\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.isClearingWalls) {\n      this.setState({\n        ...nextProps,\n      });\n    }\n  }\n\n  handleMouseDown() {\n    if (this.props.isRunning) return;\n    if (!(this.state.isEnd || this.state.isStart)) {\n      this.setState({\n        isWall: !this.state.isWall,\n      });\n    }\n  }\n\n  handleMouseEnter() {\n    if (this.props.isRunning) return;\n    if (this.props.mouseDown) {\n      if (this.props.isMovingStart && !this.state.isEnd) {\n        this.setState({\n          isStart: true,\n          isWall: false,\n        });\n      } else if (this.props.isMovingEnd && !this.state.isStart) {\n        this.setState({\n          isEnd: true,\n          isWall: false,\n        });\n      } else {\n        this.handleMouseDown();\n      }\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.props.isRunning) return;\n    if (this.props.isMovingStart) {\n      this.setState({\n        isStart: false,\n      });\n    }\n\n    if (this.props.isMovingEnd) {\n      this.setState({\n        isEnd: false,\n      });\n    }\n  }\n\n  render() {\n    const { row, col, isEnd, isStart, isWall } = this.state;\n\n    const customClass = isEnd\n      ? \"node-end\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${customClass}`}\n        onMouseDown={this.handleMouseDown}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      ></td>\n    );\n  }\n}\n\nexport default Node;\n","import TinyQueue from \"tinyqueue\";\r\n\r\nexport default function dijkstra(\r\n  startNode,\r\n  finishNode,\r\n  grid,\r\n  diagonal,\r\n  isAstar\r\n) {\r\n  // Set the start node distance to 0\r\n  startNode.distance = 0;\r\n\r\n  // Insert all nodes in a min-heap\r\n  const nodes = getAllNodes(grid);\r\n  let pq = new TinyQueue(nodes, function (a, b) {\r\n    return a.distance - b.distance;\r\n  });\r\n\r\n  // Visited nodes\r\n  let visitedNodes = [];\r\n\r\n  while (pq.length) {\r\n    // get the closest nodes\r\n    let cur = pq.pop();\r\n\r\n    // Don't traverse a wall\r\n    if (cur.isWall) continue;\r\n\r\n    // No path exists\r\n    if (cur.distance === Infinity) return visitedNodes;\r\n\r\n    // Push the nodes in the visited set\r\n    cur.isVisited = true;\r\n    visitedNodes.push(cur);\r\n\r\n    const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n    for (const node of adjacentNodes) {\r\n      // Modify the algorith to move in the direction of end node if A* is selected\r\n      const param = isAstar ? node.heuristic : cur.distance;\r\n      // Relaxing the edges\r\n      if (node.distance > param + 1) {\r\n        node.distance = param + 1;\r\n        node.previousNode = cur;\r\n\r\n        // Heapify\r\n        pq = new TinyQueue(pq.data, function (a, b) {\r\n          return a.distance - b.distance;\r\n        });\r\n\r\n        if (node.isEnd) {\r\n          return visitedNodes;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function dfs(startNode, finishNode, grid, diagonal) {\r\n  const visitedNodes = [];\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  while (stack.length) {\r\n    const cur = stack.pop();\r\n\r\n    if (cur.isEnd) return visitedNodes;\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        stack.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function bfs(startNode, finishNode, grid, diagonal) {\r\n  const visitedNodes = [];\r\n  const queue = [];\r\n\r\n  queue.push(startNode);\r\n\r\n  while (queue.length) {\r\n    const cur = queue.shift();\r\n    if (cur.isEnd) return visitedNodes;\r\n\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid, diagonal);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid, diagonal) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  if (diagonal) directions.push([1, 1], [-1, 1], [-1, -1], [1, -1]);\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Button,\r\n  Spinner,\r\n  ToggleButton,\r\n  Image,\r\n} from \"react-bootstrap\";\r\nimport dijkstra from \"../algorithms/dijkstra\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport bfs from \"../algorithms/bfs\";\r\nimport pathImg from \"../assets/path.svg\";\r\nimport profileImg from \"../assets/profile.svg\";\r\nimport codeImg from \"../assets/code.svg\";\r\nimport githubImg from \"../assets/github.svg\";\r\n\r\nclass Visualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseDown: false,\r\n      startRow: 7,\r\n      startCol: 15,\r\n      endRow: 10,\r\n      endCol: 30,\r\n      algorithm: \"1\",\r\n      isRunning: false,\r\n      isClearingWalls: false,\r\n      isMovingStart: false,\r\n      isMovingEnd: false,\r\n      diagonal: false,\r\n      pathLength: \"-\",\r\n      visited: \"-\",\r\n    };\r\n\r\n    this.clearBoard = this.clearBoard.bind(this);\r\n    this.runPathfinder = this.runPathfinder.bind(this);\r\n    this.getShortestPath = this.getShortestPath.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n    this.clearGrid = this.clearGrid.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.getInitialGrid = this.getInitialGrid.bind(this);\r\n    this.createNode = this.createNode.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  }\r\n\r\n  handleChange() {\r\n    this.setState({\r\n      diagonal: !this.state.diagonal,\r\n    });\r\n  }\r\n\r\n  handleSelect(eventKey) {\r\n    this.setState({\r\n      algorithm: eventKey,\r\n    });\r\n  }\r\n\r\n  handleMouseDown(e) {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    const [row, col] = e.target.id.split(\"-\").slice(1);\r\n    if (row == this.state.startRow && col == this.state.startCol) {\r\n      this.setState({\r\n        isMovingStart: true,\r\n      });\r\n    }\r\n\r\n    if (row == this.state.endRow && col == this.state.endCol) {\r\n      this.setState({\r\n        isMovingEnd: true,\r\n      });\r\n    }\r\n    this.setState({ mouseDown: true, isClearingWalls: false });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    this.setState({\r\n      mouseDown: false,\r\n      isClearingWalls: false,\r\n      isMovingStart: false,\r\n      isMovingEnd: false,\r\n    });\r\n\r\n    let startRow = this.state.startRow,\r\n      startCol = this.state.startCol,\r\n      endRow = this.state.endRow,\r\n      endCol = this.state.endCol;\r\n\r\n    const newGrid = this.state.grid.slice();\r\n    for (let ref in this.refs) {\r\n      const { row, col, isStart, isEnd } = this.refs[ref].state;\r\n      newGrid[row][col] = this.refs[ref].state;\r\n      startRow = isStart ? row : startRow;\r\n      startCol = isStart ? col : startCol;\r\n      endRow = isEnd ? row : endRow;\r\n      endCol = isEnd ? col : endCol;\r\n    }\r\n\r\n    this.setState({\r\n      grid: newGrid,\r\n      startRow,\r\n      startCol,\r\n      endRow,\r\n      endCol,\r\n    });\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isRunning) return;\r\n    if (this.state.mouseDown) {\r\n      this.handleMouseUp();\r\n    }\r\n  }\r\n\r\n  // Creating an initial grid\r\n  getInitialGrid() {\r\n    const grid = [];\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n      const cur = [];\r\n\r\n      for (let col = 0; col < 50; col++) {\r\n        cur.push(this.createNode(row, col));\r\n      }\r\n\r\n      grid.push(cur);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  // Creating each node\r\n  createNode(row, col) {\r\n    const { startRow, startCol, endRow, endCol } = this.state;\r\n    let node = {\r\n      row,\r\n      col,\r\n      isStart: row === startRow && col === startCol,\r\n      isEnd: row === endRow && col === endCol,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      mouseDown: false,\r\n      heuristic: this.state.diagonal\r\n        ? (endRow - row) ** 2 + (endCol - col) ** 2\r\n        : Math.abs(endRow - row) + Math.abs(endCol - col),\r\n    };\r\n\r\n    if (typeof startRow !== \"undefined\") {\r\n      node.isStart = row === startRow && col === startCol;\r\n      node.isEnd = row === endRow && col === endCol;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  clearBoard() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    const { startRow, startCol, endRow, endCol, isRunning } = this.state;\r\n    const newGrid = this.getInitialGrid();\r\n    this.setState({ isClearingWalls: true, grid: newGrid });\r\n  }\r\n\r\n  runPathfinder() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    this.toggleIsRunning();\r\n    const {\r\n      algorithm,\r\n      startRow,\r\n      startCol,\r\n      endRow,\r\n      endCol,\r\n      grid,\r\n      diagonal,\r\n    } = this.state;\r\n    const startNode = grid[startRow][startCol],\r\n      endNode = grid[endRow][endCol];\r\n    let visitedNodes;\r\n\r\n    const startTime = window.performance.now();\r\n    switch (algorithm) {\r\n      case \"1\":\r\n        visitedNodes = dijkstra(startNode, endNode, grid, diagonal);\r\n        break;\r\n      case \"2\":\r\n        // A* is a simple modification of dijkstra\r\n        const isAstar = true;\r\n        visitedNodes = dijkstra(startNode, endNode, grid, diagonal, isAstar);\r\n        break;\r\n      case \"3\":\r\n        visitedNodes = dfs(startNode, endNode, grid, diagonal);\r\n        break;\r\n      case \"4\":\r\n        visitedNodes = bfs(startNode, endNode, grid, diagonal);\r\n        break;\r\n      default:\r\n    }\r\n\r\n    const shortestPath = this.getShortestPath(endNode);\r\n    shortestPath.push(\"end\");\r\n\r\n    const endTime = window.performance.now();\r\n    this.setState({\r\n      visited: visitedNodes.length,\r\n      pathLength: shortestPath.length,\r\n    });\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  getShortestPath(endNode) {\r\n    const shortestPath = [];\r\n    let cur = endNode;\r\n    while (cur !== null) {\r\n      shortestPath.unshift(cur);\r\n      cur = cur.previousNode;\r\n    }\r\n    return shortestPath;\r\n  }\r\n\r\n  animate(visitedNodes, shortestPath) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className;\r\n        if (\r\n          nodeClassName !== \"node node-start\" &&\r\n          nodeClassName !== \"node node-end\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      if (shortestPath[i] === \"end\") {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 40);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = shortestPath[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-end\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path\";\r\n          }\r\n        }, i * 30);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      this.setState({\r\n        pathLength: \"-\",\r\n        visited: \"-\",\r\n      });\r\n      const { startRow, startCol, endRow, endCol } = this.state;\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-end\" &&\r\n            nodeClassName !== \"node node-wall\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node\";\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.heuristic = this.state.diagonal\r\n              ? (endRow - node.row) ** 2 + (endCol - node.col) ** 2\r\n              : Math.abs(endRow - node.row) + Math.abs(endCol - node.col);\r\n          }\r\n          if (nodeClassName === \"node node-end\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.heuristic = 0;\r\n            node.previousNode = null;\r\n          }\r\n          if (nodeClassName === \"node node-start\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.heuristic = this.state.diagonal\r\n              ? (endRow - node.row) ** 2 + (endCol - node.col) ** 2\r\n              : Math.abs(endRow - node.row) + Math.abs(endCol - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      mouseDown,\r\n      isClearingWalls,\r\n      isMovingStart,\r\n      isMovingEnd,\r\n      isRunning,\r\n      algorithm,\r\n      diagonal,\r\n      pathLength,\r\n      visited,\r\n    } = this.state;\r\n\r\n    const algoKeys = {\r\n      \"1\": \"Dijkstra's\",\r\n      \"2\": \"A-star\",\r\n      \"3\": \"Depth-first search\",\r\n      \"4\": \"Breadth-first search\",\r\n    };\r\n\r\n    const algo = algoKeys[algorithm];\r\n    const infoText = {\r\n      \"1\":\r\n        \"The Dijkstra's algorithm is a greedy algorithm which guarantees the shortest path from one node to all other nodes in a weighted graph.\",\r\n      \"2\":\r\n        \"The A-star algorithm is a smarter version of Dijkstra's. It specializes in finding the shortest path from a start node to a finish node by moving in the direction of the finish node.\",\r\n      \"3\":\r\n        \"The Depth-first search algorithm is a graph traversal algorithm which prioritizes exploring the deeper nodes.\",\r\n      \"4\":\r\n        \"The Breadth-first search algorithm is a graph traversal algorithm which prioritizes exploring the neighboring nodes.\",\r\n    };\r\n\r\n    const info = infoText[algorithm];\r\n\r\n    return (\r\n      <div\r\n        onMouseUp={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseUp();\r\n        }}\r\n        onMouseDown={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseDown(e);\r\n        }}\r\n        onMouseLeave={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseLeave();\r\n        }}\r\n      >\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand>\r\n            <img\r\n              alt=\"\"\r\n              src={pathImg}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{\" \"}\r\n            Pathfinding Algorithm Visualizer\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          {isRunning ? (\r\n            <>\r\n              <span className=\"info-text\">Visualizing</span>\r\n              <Spinner animation=\"border\" variant=\"light\" />\r\n            </>\r\n          ) : (\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <NavDropdown\r\n                  variant=\"Info\"\r\n                  title=\"Algorithm\"\r\n                  id=\"basic-nav-dropdown\"\r\n                  onSelect={(eventKey) => {\r\n                    this.handleSelect(eventKey);\r\n                  }}\r\n                >\r\n                  <NavDropdown.Item eventKey=\"1\">Dijkstra's</NavDropdown.Item>\r\n                  <NavDropdown.Item eventKey=\"2\">A*</NavDropdown.Item>\r\n                  <NavDropdown.Item eventKey=\"3\">\r\n                    Depth-first search\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item eventKey=\"4\">\r\n                    Breadth-first search\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n\r\n                <Button variant=\"info\" onClick={this.runPathfinder}>\r\n                  Run -> {algo}\r\n                </Button>\r\n                <Button onClick={this.clearBoard} variant=\"outline-danger\">\r\n                  Clear walls and board\r\n                </Button>\r\n\r\n                <Button onClick={this.clearGrid} variant=\"outline-warning\">\r\n                  Clear board\r\n                </Button>\r\n                <Button\r\n                  variant={diagonal ? \"secondary\" : \"light\"}\r\n                  onClick={this.handleChange}\r\n                >\r\n                  {diagonal\r\n                    ? \"Lateral traversal only\"\r\n                    : \"Allow diagonal traversal\"}\r\n                </Button>\r\n              </Nav>\r\n              <div className=\"links\">\r\n                <a href=\"https://github.com/paspunoor/pathfinding_visualizer\">\r\n                  <Image alt=\"code\" className=\"icons\" src={codeImg} />\r\n                </a>\r\n                <a href=\"https://github.com/paspunoor\">\r\n                  <Image alt=\"github\" className=\"icons\" src={githubImg} />\r\n                </a>\r\n                {/* <a>\r\n                  <Image alt=\"profile\" className=\"icons\" src={profileImg} />\r\n                </a> */}\r\n              </div>\r\n            </Navbar.Collapse>\r\n          )}\r\n        </Navbar>\r\n        <div className=\"panel\">\r\n          <div className=\"info\">\r\n            <div className=\"tutorial\">\r\n              Welcome to the Pathfinding Algorithm Visualizer! Drag and drop the\r\n              Spaceship and the Planet anywhere on the grid. You can add\r\n              asteroids by clicking and dragging on an empty cell. Choose an\r\n              algorithm from the dropdown list above and click on <b>Run</b> to\r\n              watch the Spaceship find it's way to the Planet. Tip: Click on\r\n              Clear walls and board if you lose your Spaceship or Planet.\r\n            </div>\r\n            <div className=\"algo-info\">{info}</div>\r\n          </div>\r\n          <div className=\"metrics\">\r\n            <span className=\"stat visited\">{\"NODES VISITED : \" + visited}</span>\r\n            <span className=\"stat path\">\r\n              {\"PATH LENGTH : \" + (pathLength - 2 || pathLength)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <table className=\"grid\">\r\n          <tbody>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      row,\r\n                      col,\r\n                      isEnd,\r\n                      isStart,\r\n                      isWall,\r\n                      isVisited,\r\n                      distance,\r\n                      previousNode,\r\n                    } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        row={row}\r\n                        col={col}\r\n                        isEnd={isEnd}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        isVisited={isVisited}\r\n                        mouseDown={mouseDown}\r\n                        distance={distance}\r\n                        previousNode={previousNode}\r\n                        ref={row + \":\" + col}\r\n                        isClearingWalls={isClearingWalls}\r\n                        isMovingStart={isMovingStart}\r\n                        isMovingEnd={isMovingEnd}\r\n                        isRunning={isRunning}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n","import React from \"react\";\r\nimport \"./css/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Visualizer from \"./components/visualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Visualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}