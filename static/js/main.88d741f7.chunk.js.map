{"version":3,"sources":["assets/path.svg","components/node.js","algorithms/dijkstra.js","algorithms/astar.js","algorithms/dfs.js","algorithms/bfs.js","components/visualizer.js","App.js","index.js"],"names":["module","exports","Node","props","state","handleMouseDown","bind","handleMouseEnter","handleMouseLeave","nextProps","isClearingWalls","this","setState","isRunning","isEnd","isStart","isWall","mouseDown","isMovingStart","isMovingEnd","row","col","customClass","id","className","onMouseDown","onMouseEnter","onMouseLeave","Component","dijkstra","startNode","finishNode","grid","distance","nodes","node","push","getAllNodes","pq","TinyQueue","a","b","visitedNodes","length","cur","pop","Infinity","isVisited","adjacentNodes","getUnvisitedNeighbors","previousNode","data","neighbors","dir","newRow","newCol","astar","endNode","visitedNodesInOrder","unvisitedNodes","sortNodesByDistance","closestNode","shift","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","filter","neighbor","distanceToFinishNode","Visualizer","startRow","startCol","endRow","endCol","algorithm","clearBoard","runPathfinder","getShortestPath","toggleIsRunning","clearGrid","handleSelect","getInitialGrid","createNode","eventKey","e","target","split","slice","newGrid","ref","refs","handleMouseUp","stack","dfs","queue","bfs","shortestPath","animate","unshift","i","setTimeout","animateShortestPath","nodeClassName","document","getElementById","isNode","algo","onMouseUp","preventDefault","Navbar","bg","variant","expand","Brand","alt","src","pathImg","width","height","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","onSelect","Item","Button","onClick","map","rowIdx","key","nodeIdx","App","ReactDOM","render","StrictMode"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,4OCqF5BC,E,kDAlFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAL,eAAkBD,GAClB,EAAKE,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBALP,E,sEAQOG,GACpBA,EAAUC,iBACZC,KAAKC,SAAL,eACKH,M,wCAMHE,KAAKR,MAAMU,WACTF,KAAKP,MAAMU,OAASH,KAAKP,MAAMW,SACnCJ,KAAKC,SAAS,CACZI,QAASL,KAAKP,MAAMY,W,yCAMpBL,KAAKR,MAAMU,WACXF,KAAKR,MAAMc,YACTN,KAAKR,MAAMe,gBAAkBP,KAAKP,MAAMU,MAC1CH,KAAKC,SAAS,CACZG,SAAS,EACTC,QAAQ,IAEDL,KAAKR,MAAMgB,cAAgBR,KAAKP,MAAMW,QAC/CJ,KAAKC,SAAS,CACZE,OAAO,EACPE,QAAQ,IAGVL,KAAKN,qB,yCAMLM,KAAKR,MAAMU,YACXF,KAAKR,MAAMe,eACbP,KAAKC,SAAS,CACZG,SAAS,IAITJ,KAAKR,MAAMgB,aACbR,KAAKC,SAAS,CACZE,OAAO,O,+BAKH,IAAD,EACsCH,KAAKP,MAA1CgB,EADD,EACCA,IAAKC,EADN,EACMA,IAAKP,EADX,EACWA,MAAOC,EADlB,EACkBA,QAASC,EAD3B,EAC2BA,OAE5BM,EAAcR,EAChB,WACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,wBACEO,GAAE,eAAUH,EAAV,YAAiBC,GACnBG,UAAS,eAAUF,GACnBG,YAAad,KAAKN,gBAClBqB,aAAcf,KAAKJ,iBACnBoB,aAAchB,KAAKH,uB,GA7ERoB,a,wCCAJ,SAASC,EAASC,EAAWC,EAAYC,GAEtDF,EAAUG,SAAW,EAWrB,IARA,IAAMC,EA6CR,SAAqBF,GACnB,IADyB,EACnBE,EAAQ,GADW,cAEPF,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbZ,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAde,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFC,8BAOzB,OAAOD,EApDOG,CAAYL,GACtBM,EAAK,IAAIC,IAAUL,GAAO,SAAUM,EAAGC,GACzC,OAAOD,EAAEP,SAAWQ,EAAER,YAIpBS,EAAe,GAEZJ,EAAGK,QAAQ,CAEhB,IAAIC,EAAMN,EAAGO,MAGb,IAAID,EAAI5B,OAAR,CAGA,GAAI4B,EAAIX,WAAaa,IAAU,OAAOJ,EAGtCE,EAAIG,WAAY,EAChBL,EAAaN,KAAKQ,GAElB,IAdgB,EAcVI,EAAgBC,EAAsBL,EAAKZ,GAdjC,cAgBGgB,GAhBH,IAgBhB,2BAAkC,CAAC,IAAxBb,EAAuB,QAEhC,GAAIA,EAAKF,SAAWW,EAAIX,SAAW,IACjCE,EAAKF,SAAWW,EAAIX,SAAW,EAC/BE,EAAKe,aAAeN,EAGpBN,EAAK,IAAIC,IAAUD,EAAGa,MAAM,SAAUX,EAAGC,GACvC,OAAOD,EAAEP,SAAWQ,EAAER,YAGpBE,EAAKrB,OACP,OAAO4B,GA5BG,gCAkClB,OAAOA,EAcT,SAASO,EAAsBd,EAAMH,GAYnC,IAXA,IAAIoB,EAAY,GASRhC,EAAae,EAAbf,IAAKC,EAAQc,EAARd,IAEb,MATmB,CACjB,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,IAKP,eAA8B,CAAzB,IAAMgC,EAAG,KACNC,EAASlC,EAAMiC,EAAI,GACnBE,EAASlC,EAAMgC,EAAI,GAEvB,GAAKC,GACLA,EAAStB,EAAKW,QACd,GAAKY,GACLA,EAASvB,EAAK,GAAGW,SAChBX,EAAKsB,GAAQC,GAAQR,WAEtBK,EAAUhB,KAAKJ,EAAKsB,GAAQC,IAIhC,OAAOH,ECzFM,SAASI,EAAM1B,EAAW2B,EAASzB,GAChD,IAAM0B,EAAsB,GAC5B5B,EAAUG,SAAW,EAGrB,IAFA,IAAM0B,EAgBR,SAAqB3B,GACnB,IADyB,EACnBE,EAAQ,GADW,cAEPF,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbZ,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAde,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFC,8BAOzB,OAAOD,EAvBgBG,CAAYL,GAE5B2B,EAAehB,QAAQ,CAC5BiB,EAAoBD,GACpB,IAAME,EAAcF,EAAeG,QAEnC,IAAKD,EAAY7C,OAAQ,CACvB,GAAI6C,EAAY5B,WAAaa,IAAU,OAAOY,EAG9C,GAFAG,EAAYd,WAAY,EACxBW,EAAoBtB,KAAKyB,GACrBA,IAAgBJ,EAAS,OAAOC,EACpCK,EAAyBF,EAAa7B,KAe5C,SAAS4B,EAAoBD,GAC3BA,EAAeK,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMhC,SAAWiC,EAAMjC,YAG/D,SAAS8B,EAAyB5B,EAAMH,GACtC,IAD4C,EACtCmC,EAOR,SAA+BhC,EAAMH,GACnC,IAAMoB,EAAY,GACV/B,EAAac,EAAbd,IAAKD,EAAQe,EAARf,IACTA,EAAM,GAAGgC,EAAUhB,KAAKJ,EAAKZ,EAAM,GAAGC,IACtCD,EAAMY,EAAKW,OAAS,GAAGS,EAAUhB,KAAKJ,EAAKZ,EAAM,GAAGC,IACpDA,EAAM,GAAG+B,EAAUhB,KAAKJ,EAAKZ,GAAKC,EAAM,IACxCA,EAAMW,EAAK,GAAGW,OAAS,GAAGS,EAAUhB,KAAKJ,EAAKZ,GAAKC,EAAM,IAC7D,OAAO+B,EAAUgB,QAAO,SAACC,GAAD,OAAeA,EAAStB,aAdrBE,CAAsBd,EAAMH,GADX,cAErBmC,GAFqB,IAE5C,2BAA2C,CAAC,IAAjCE,EAAgC,QACzCA,EAASpC,SAAWE,EAAKF,SAAW,EAAIoC,EAASC,qBACjDD,EAASnB,aAAef,GAJkB,+BCR9C,SAASc,EAAsBd,EAAMH,GAYnC,IAXA,IAAIoB,EAAY,GASRhC,EAAae,EAAbf,IAAKC,EAAQc,EAARd,IAEb,MATmB,CACjB,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,IAKP,eAA8B,CAAzB,IAAMgC,EAAG,KACNC,EAASlC,EAAMiC,EAAI,GACnBE,EAASlC,EAAMgC,EAAI,GAEvB,GAAKC,GACLA,EAAStB,EAAKW,QACd,GAAKY,GACLA,EAASvB,EAAK,GAAGW,SAChBX,EAAKsB,GAAQC,GAAQR,WAEtBK,EAAUhB,KAAKJ,EAAKsB,GAAQC,IAIhC,OAAOH,ECzBT,SAASH,EAAsBd,EAAMH,GAYnC,IAXA,IAAIoB,EAAY,GASRhC,EAAae,EAAbf,IAAKC,EAAQc,EAARd,IAEb,MATmB,CACjB,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,IAKP,eAA8B,CAAzB,IAAMgC,EAAG,KACNC,EAASlC,EAAMiC,EAAI,GACnBE,EAASlC,EAAMgC,EAAI,GAEvB,GAAKC,GACLA,EAAStB,EAAKW,QACd,GAAKY,GACLA,EAASvB,EAAK,GAAGW,SAChBX,EAAKsB,GAAQC,GAAQR,WAEtBK,EAAUhB,KAAKJ,EAAKsB,GAAQC,IAIhC,OAAOH,E,qBC+WMmB,E,kDAvZb,aAAe,IAAD,8BACZ,gBACKnE,MAAQ,CACX4B,KAAM,GACNf,WAAW,EACXuD,SAAU,EACVC,SAAU,GACVC,OAAQ,GACRC,OAAQ,GACRC,UAAW,IACX/D,WAAW,EACXH,iBAAiB,EACjBQ,eAAe,EACfC,aAAa,GAGf,EAAK0D,WAAa,EAAKA,WAAWvE,KAAhB,gBAClB,EAAKwE,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,gBAAkB,EAAKA,gBAAgBzE,KAArB,gBACvB,EAAK0E,gBAAkB,EAAKA,gBAAgB1E,KAArB,gBACvB,EAAK2E,UAAY,EAAKA,UAAU3E,KAAf,gBACjB,EAAK4E,aAAe,EAAKA,aAAa5E,KAAlB,gBACpB,EAAK6E,eAAiB,EAAKA,eAAe7E,KAApB,gBACtB,EAAK8E,WAAa,EAAKA,WAAW9E,KAAhB,gBAvBN,E,gEA2BZ,IAAM0B,EAAOrB,KAAKwE,iBAClBxE,KAAKC,SAAS,CAAEoB,W,wCAIhBrB,KAAKC,SAAS,CAAEC,WAAYF,KAAKP,MAAMS,c,mCAG5BwE,GACX1E,KAAKC,SAAS,CACZgE,UAAWS,M,sCAICC,GACd,IAAI3E,KAAKP,MAAMS,UAAf,CACAF,KAAKsE,YAFY,MAGEK,EAAEC,OAAOhE,GAAGiE,MAAM,KAAKC,MAAM,GAH/B,mBAGVrE,EAHU,KAGLC,EAHK,KAIbD,GAAOT,KAAKP,MAAMoE,UAAYnD,GAAOV,KAAKP,MAAMqE,UAClD9D,KAAKC,SAAS,CACZM,eAAe,IAIfE,GAAOT,KAAKP,MAAMsE,QAAUrD,GAAOV,KAAKP,MAAMuE,QAChDhE,KAAKC,SAAS,CACZO,aAAa,IAGjBR,KAAKC,SAAS,CAAEK,WAAW,EAAMP,iBAAiB,O,sCAIlD,IAAIC,KAAKP,MAAMS,UAAf,CACAF,KAAKsE,YACLtE,KAAKC,SAAS,CACZK,WAAW,EACXP,iBAAiB,EACjBQ,eAAe,EACfC,aAAa,IAGf,IAAIqD,EAAW7D,KAAKP,MAAMoE,SACxBC,EAAW9D,KAAKP,MAAMqE,SACtBC,EAAS/D,KAAKP,MAAMsE,OACpBC,EAAShE,KAAKP,MAAMuE,OAEhBe,EAAU/E,KAAKP,MAAM4B,KAAKyD,QAChC,IAAK,IAAIE,KAAOhF,KAAKiF,KAAM,CAAC,IAAD,EACYjF,KAAKiF,KAAKD,GAAKvF,MAA5CgB,EADiB,EACjBA,IAAKC,EADY,EACZA,IAAKN,EADO,EACPA,QAASD,EADF,EACEA,MAC3B4E,EAAQtE,GAAKC,GAAOV,KAAKiF,KAAKD,GAAKvF,MACnCoE,EAAWzD,EAAUK,EAAMoD,EAC3BC,EAAW1D,EAAUM,EAAMoD,EAC3BC,EAAS5D,EAAQM,EAAMsD,EACvBC,EAAS7D,EAAQO,EAAMsD,EAGzBhE,KAAKC,SAAS,CACZoB,KAAM0D,EACNlB,WACAC,WACAC,SACAC,c,yCAKEhE,KAAKP,MAAMS,WACXF,KAAKP,MAAMa,WACbN,KAAKkF,kB,uCAQP,IAFA,IAAM7D,EAAO,GAEJZ,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAGjC,IAFA,IAAMwB,EAAM,GAEHvB,EAAM,EAAGA,EAAM,GAAIA,IAC1BuB,EAAIR,KAAKzB,KAAKyE,WAAWhE,EAAKC,IAGhCW,EAAKI,KAAKQ,GAEZ,OAAOZ,I,iCAIEZ,EAAKC,GAAM,IAAD,EAC4BV,KAAKP,MAA5CoE,EADW,EACXA,SAAUC,EADC,EACDA,SAAUC,EADT,EACSA,OAAQC,EADjB,EACiBA,OAChCxC,EAAO,CACTf,MACAC,MACAN,QAASK,IAAQoD,GAAYnD,IAAQoD,EACrC3D,MAAOM,IAAQsD,GAAUrD,IAAQsD,EACjC1C,SAAUa,IACVC,WAAW,EACX/B,QAAQ,EACRkC,aAAc,KACdjC,WAAW,EACXqD,qBAAsB,SAACI,EAAStD,EAAQ,GAAlB,SAAuBuD,EAAStD,EAAQ,IAQhE,MALwB,qBAAbmD,IACTrC,EAAKpB,QAAUK,IAAQoD,GAAYnD,IAAQoD,EAC3CtC,EAAKrB,MAAQM,IAAQsD,GAAUrD,IAAQsD,GAGlCxC,I,mCAIP,IAAIxB,KAAKP,MAAMS,UAAf,CACAF,KAAKsE,YAFM,MAG+CtE,KAAKP,MACzDsF,GAJK,EAGHlB,SAHG,EAGOC,SAHP,EAGiBC,OAHjB,EAGyBC,OAHzB,EAGiC9D,UAC5BF,KAAKwE,kBACrBxE,KAAKC,SAAS,CAAEF,iBAAiB,EAAMsB,KAAM0D,O,sCAI7C,IAAI/E,KAAKP,MAAMS,UAAf,CACAF,KAAKsE,YACLtE,KAAKqE,kBAHS,IAOVtC,EAPU,EAIkD/B,KAAKP,MAA7DwE,EAJM,EAINA,UAAWJ,EAJL,EAIKA,SAAUC,EAJf,EAIeA,SAAUC,EAJzB,EAIyBA,OAAQC,EAJjC,EAIiCA,OAAQ3C,EAJzC,EAIyCA,KACjDF,EAAYE,EAAKwC,GAAUC,GAC/BhB,EAAUzB,EAAK0C,GAAQC,GAGzB,OAAQC,GACN,IAAK,IACHlC,EAAeb,EAASC,EAAW2B,EAASzB,GAC5C,MACF,IAAK,IACHU,EAAec,EAAM1B,EAAW2B,EAASzB,GACzC,MACF,IAAK,IACHU,EFjLO,SAAaZ,EAAWC,EAAYC,GACjD,IAAMU,EAAe,GACfoD,EAAQ,GAEd,IADAA,EAAM1D,KAAKN,GACJgE,EAAMnD,QAAQ,CACnB,IAAMC,EAAMkD,EAAMjD,MAElB,GAAID,EAAI9B,MAAO,OAAO4B,EACtB,IAAKE,EAAI5B,SAAW4B,EAAI7B,UAAY6B,EAAIG,WAAY,CAClDH,EAAIG,WAAY,EAChBL,EAAaN,KAAKQ,GAElB,IAJkD,EAI5CI,EAAgBC,EAAsBL,EAAKZ,GAJC,cAM/BgB,GAN+B,IAMlD,2BAAkC,CAAC,IAAxBb,EAAuB,QAChCA,EAAKe,aAAeN,EACpBkD,EAAM1D,KAAKD,IARqC,gCAatD,OAAOO,EE4JcqD,CAAIjE,EAAW2B,EAASzB,GACvC,MACF,IAAK,IACHU,EDpLO,SAAaZ,EAAWC,EAAYC,GACjD,IAAMU,EAAe,GACfsD,EAAQ,GAId,IAFAA,EAAM5D,KAAKN,GAEJkE,EAAMrD,QAAQ,CACnB,IAAMC,EAAMoD,EAAMlC,QAClB,GAAIlB,EAAI9B,MAAO,OAAO4B,EAEtB,IAAKE,EAAI5B,SAAW4B,EAAI7B,UAAY6B,EAAIG,WAAY,CAClDH,EAAIG,WAAY,EAChBL,EAAaN,KAAKQ,GAElB,IAJkD,EAI5CI,EAAgBC,EAAsBL,EAAKZ,GAJC,cAM/BgB,GAN+B,IAMlD,2BAAkC,CAAC,IAAxBb,EAAuB,QAChCA,EAAKe,aAAeN,EACpBoD,EAAM5D,KAAKD,IARqC,gCAatD,OAAOO,EC6JcuD,CAAInE,EAAW2B,EAASzB,GAK3C,IAAMkE,EAAevF,KAAKoE,gBAAgBtB,GAC1CyC,EAAa9D,KAAK,OAClBzB,KAAKwF,QAAQzD,EAAcwD,M,sCAGbzC,GAGd,IAFA,IAAMyC,EAAe,GACjBtD,EAAMa,EACK,OAARb,GACLsD,EAAaE,QAAQxD,GACrBA,EAAMA,EAAIM,aAEZ,OAAOgD,I,8BAGDxD,EAAcwD,GACpB,IADmC,IAAD,kBACzBG,GACP,GAAIA,IAAM3D,EAAaC,OAIrB,OAHA2D,YAAW,WACT,EAAKC,oBAAoBL,KACxB,EAAIG,GACD,CAAN,UAEFC,YAAW,WACT,IAAMnE,EAAOO,EAAa2D,GACpBG,EAAgBC,SAASC,eAAT,eACZvE,EAAKf,IADO,YACAe,EAAKd,MACzBG,UAEkB,oBAAlBgF,GACkB,kBAAlBA,IAEAC,SAASC,eAAT,eAAgCvE,EAAKf,IAArC,YAA4Ce,EAAKd,MAAOG,UACtD,uBAEH,EAAI6E,IAnBAA,EAAI,EAAGA,GAAK3D,EAAaC,OAAQ0D,IAAK,CAAC,IAAD,IAAtCA,GAAsC,qC,0CAuB7BH,GAClB,IADiC,IAAD,kBACvBG,GACiB,QAApBH,EAAaG,GACfC,YAAW,WACT,EAAKtB,oBACA,GAAJqB,GAEHC,YAAW,WACT,IAAMnE,EAAO+D,EAAaG,GACpBG,EAAgBC,SAASC,eAAT,eACZvE,EAAKf,IADO,YACAe,EAAKd,MACzBG,UAEkB,oBAAlBgF,GACkB,kBAAlBA,IAEAC,SAASC,eAAT,eAAgCvE,EAAKf,IAArC,YAA4Ce,EAAKd,MAAOG,UACtD,6BAEC,GAAJ6E,IAlBEA,EAAI,EAAGA,EAAIH,EAAavD,OAAQ0D,IAAM,EAAtCA,K,kCAwBT,IAAK1F,KAAKP,MAAMS,UAAW,CAAC,IAAD,IACsBF,KAAKP,MAC9CsF,GAFmB,EACjBlB,SADiB,EACPC,SADO,EACGC,OADH,EACWC,OACpBhE,KAAKP,MAAM4B,KAAKyD,SAFP,cAGPC,GAHO,IAGzB,2BAA2B,CAAC,IAAD,EAAhBtE,EAAgB,sBACNA,GADM,IACzB,2BAAwB,CAAC,IAAde,EAAa,QAClBqE,EAAgBC,SAASC,eAAT,eACVvE,EAAKf,IADK,YACEe,EAAKd,MACzBG,UAEkB,oBAAlBgF,GACkB,kBAAlBA,GACkB,mBAAlBA,IAEAC,SAASC,eAAT,eAAgCvE,EAAKf,IAArC,YAA4Ce,EAAKd,MAAOG,UACtD,OACFW,EAAKY,WAAY,EACjBZ,EAAKF,SAAWa,IAChBX,EAAKmC,qBACH,SAAC3D,KAAKP,MAAMsE,OAASvC,EAAKf,IAAQ,GAAlC,SACCT,KAAKP,MAAMuE,OAASxC,EAAKd,IAAQ,IAEhB,kBAAlBmF,IACFrE,EAAKY,WAAY,EACjBZ,EAAKF,SAAWa,IAChBX,EAAKmC,qBAAuB,EAC5BnC,EAAKe,aAAe,KACpBf,EAAKF,SAAWa,KAEI,oBAAlB0D,IACFrE,EAAKY,WAAY,EACjBZ,EAAKF,SAAWa,IAChBX,EAAKmC,qBACH,SAAC3D,KAAKP,MAAMsE,OAASvC,EAAKf,IAAQ,GAAlC,SACCT,KAAKP,MAAMuE,OAASxC,EAAKd,IAAQ,GACpCc,EAAKpB,SAAU,EACfoB,EAAKnB,QAAS,EACdmB,EAAKe,aAAe,KACpBf,EAAKwE,QAAS,IAlCO,gCAHF,kC,+BA4CnB,IAAD,SASHhG,KAAKP,MAPP4B,EAFK,EAELA,KACAf,EAHK,EAGLA,UACAP,EAJK,EAILA,gBACAQ,EALK,EAKLA,cACAC,EANK,EAMLA,YACAN,EAPK,EAOLA,UAWI+F,EAPW,CACf,EAAK,aACL,EAAK,SACL,EAAK,qBACL,EAAK,wBAfA,EAQLhC,WAYF,OACE,yBACEiC,UAAW,SAACvB,GACVA,EAAEwB,iBACF,EAAKjB,iBAEPpE,YAAa,SAAC6D,GACZA,EAAEwB,iBACF,EAAKzG,gBAAgBiF,IAEvB3D,aAAc,SAAC2D,GACbA,EAAEwB,iBACF,EAAKtG,qBAGP,kBAACuG,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,KACE,yBACEC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPhG,UAAU,6BACT,IAPL,oCAUA,kBAACuF,EAAA,EAAOU,OAAR,CAAeC,gBAAc,qBAC7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBpG,GAAG,oBAClB,kBAACqG,EAAA,EAAD,CAAKpG,UAAU,WACb,kBAACqG,EAAA,EAAD,CACEZ,QAAQ,OACRa,MAAM,YACNvG,GAAG,qBACHwG,SAAU,SAAC1C,GACT,EAAKH,aAAaG,KAGpB,kBAACwC,EAAA,EAAYG,KAAb,CAAkB3C,SAAS,KAA3B,cACA,kBAACwC,EAAA,EAAYG,KAAb,CAAkB3C,SAAS,KAA3B,MACA,kBAACwC,EAAA,EAAYG,KAAb,CAAkB3C,SAAS,KAA3B,sBAGA,kBAACwC,EAAA,EAAYG,KAAb,CAAkB3C,SAAS,KAA3B,yBAKF,kBAAC4C,EAAA,EAAD,CAAQhB,QAAQ,OAAOiB,QAASvH,KAAKmE,eAArC,UACU8B,GAEV,kBAACqB,EAAA,EAAD,CAAQC,QAASvH,KAAKkE,WAAYoC,QAAQ,kBAA1C,yBAIA,kBAACgB,EAAA,EAAD,CAAQC,QAASvH,KAAKsE,UAAWgC,QAAQ,mBAAzC,kBAMN,2BAAOzF,UAAU,QACf,+BACGQ,EAAKmG,KAAI,SAAC/G,EAAKgH,GACd,OACE,wBAAIC,IAAKD,GACNhH,EAAI+G,KAAI,SAAChG,EAAMmG,GAAa,IAEzBlH,EAQEe,EARFf,IACAC,EAOEc,EAPFd,IACAP,EAMEqB,EANFrB,MACAC,EAKEoB,EALFpB,QACAC,EAIEmB,EAJFnB,OACA+B,EAGEZ,EAHFY,UACAd,EAEEE,EAFFF,SACAiB,EACEf,EADFe,aAEF,OACE,kBAAC,EAAD,CACEmF,IAAKC,EACLlH,IAAKA,EACLC,IAAKA,EACLP,MAAOA,EACPC,QAASA,EACTC,OAAQA,EACR+B,UAAWA,EACX9B,UAAWA,EACXgB,SAAUA,EACViB,aAAcA,EACdyC,IAAKvE,EAAM,IAAMC,EACjBX,gBAAiBA,EACjBQ,cAAeA,EACfC,YAAaA,EACbN,UAAWA,kB,GA1YVe,aCEV2G,MARf,WACE,OACE,yBAAK/G,UAAU,OACb,kBAAC,EAAD,QCHNgH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,W","file":"static/js/main.88d741f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/path.432f50f5.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...props };\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.isClearingWalls) {\r\n      this.setState({\r\n        ...nextProps,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseDown() {\r\n    if (this.props.isRunning) return;\r\n    if (!(this.state.isEnd || this.state.isStart)) {\r\n      this.setState({\r\n        isWall: !this.state.isWall,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter() {\r\n    if (this.props.isRunning) return;\r\n    if (this.props.mouseDown) {\r\n      if (this.props.isMovingStart && !this.state.isEnd) {\r\n        this.setState({\r\n          isStart: true,\r\n          isWall: false,\r\n        });\r\n      } else if (this.props.isMovingEnd && !this.state.isStart) {\r\n        this.setState({\r\n          isEnd: true,\r\n          isWall: false,\r\n        });\r\n      } else {\r\n        this.handleMouseDown();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.props.isRunning) return;\r\n    if (this.props.isMovingStart) {\r\n      this.setState({\r\n        isStart: false,\r\n      });\r\n    }\r\n\r\n    if (this.props.isMovingEnd) {\r\n      this.setState({\r\n        isEnd: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { row, col, isEnd, isStart, isWall } = this.state;\r\n\r\n    const customClass = isEnd\r\n      ? \"node-end\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${customClass}`}\r\n        onMouseDown={this.handleMouseDown}\r\n        onMouseEnter={this.handleMouseEnter}\r\n        onMouseLeave={this.handleMouseLeave}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import TinyQueue from \"tinyqueue\";\r\n\r\nexport default function dijkstra(startNode, finishNode, grid) {\r\n  // Set the start node distance to 0\r\n  startNode.distance = 0;\r\n\r\n  // Insert all nodes in a min-heap\r\n  const nodes = getAllNodes(grid);\r\n  let pq = new TinyQueue(nodes, function (a, b) {\r\n    return a.distance - b.distance;\r\n  });\r\n\r\n  // Visited nodes\r\n  let visitedNodes = [];\r\n\r\n  while (pq.length) {\r\n    // get the closest nodes\r\n    let cur = pq.pop();\r\n\r\n    // Don't traverse a wall\r\n    if (cur.isWall) continue;\r\n\r\n    // No path exists\r\n    if (cur.distance === Infinity) return visitedNodes;\r\n\r\n    // Push the nodes in the visited set\r\n    cur.isVisited = true;\r\n    visitedNodes.push(cur);\r\n\r\n    const adjacentNodes = getUnvisitedNeighbors(cur, grid);\r\n\r\n    for (const node of adjacentNodes) {\r\n      // Relaxing the edges\r\n      if (node.distance > cur.distance + 1) {\r\n        node.distance = cur.distance + 1;\r\n        node.previousNode = cur;\r\n\r\n        // Heapify\r\n        pq = new TinyQueue(pq.data, function (a, b) {\r\n          return a.distance - b.distance;\r\n        });\r\n\r\n        if (node.isEnd) {\r\n          return visitedNodes;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [-1, 0],\r\n    [0, 1],\r\n    [0, -1],\r\n  ];\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function astar(startNode, endNode, grid) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (!closestNode.isWall) {\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === endNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n","export default function dfs(startNode, finishNode, grid) {\r\n  const visitedNodes = [];\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  while (stack.length) {\r\n    const cur = stack.pop();\r\n\r\n    if (cur.isEnd) return visitedNodes;\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        stack.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\n// Gets all the adjacent nodes\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [-1, 0],\r\n    [0, 1],\r\n    [0, -1],\r\n  ];\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","export default function bfs(startNode, finishNode, grid) {\r\n  const visitedNodes = [];\r\n  const queue = [];\r\n\r\n  queue.push(startNode);\r\n\r\n  while (queue.length) {\r\n    const cur = queue.shift();\r\n    if (cur.isEnd) return visitedNodes;\r\n\r\n    if (!cur.isWall && (cur.isStart || !cur.isVisited)) {\r\n      cur.isVisited = true;\r\n      visitedNodes.push(cur);\r\n\r\n      const adjacentNodes = getUnvisitedNeighbors(cur, grid);\r\n\r\n      for (const node of adjacentNodes) {\r\n        node.previousNode = cur;\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n\r\n  const directions = [\r\n    [1, 0],\r\n    [-1, 0],\r\n    [0, 1],\r\n    [0, -1],\r\n  ];\r\n\r\n  const { row, col } = node;\r\n\r\n  for (const dir of directions) {\r\n    const newRow = row + dir[0];\r\n    const newCol = col + dir[1];\r\n    if (\r\n      0 <= newRow &&\r\n      newRow < grid.length &&\r\n      0 <= newCol &&\r\n      newCol < grid[0].length &&\r\n      !grid[newRow][newCol].isVisited\r\n    ) {\r\n      neighbors.push(grid[newRow][newCol]);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node\";\r\nimport { Navbar, Nav, NavDropdown, Button } from \"react-bootstrap\";\r\nimport dijkstra from \"../algorithms/dijkstra\";\r\nimport astar from \"../algorithms/astar\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport bfs from \"../algorithms/bfs\";\r\nimport pathImg from \"../assets/path.svg\";\r\n\r\n// Starting with a predefined start and end node\r\n\r\nclass Visualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseDown: false,\r\n      startRow: 7,\r\n      startCol: 15,\r\n      endRow: 10,\r\n      endCol: 30,\r\n      algorithm: \"1\",\r\n      isRunning: false,\r\n      isClearingWalls: false,\r\n      isMovingStart: false,\r\n      isMovingEnd: false,\r\n    };\r\n\r\n    this.clearBoard = this.clearBoard.bind(this);\r\n    this.runPathfinder = this.runPathfinder.bind(this);\r\n    this.getShortestPath = this.getShortestPath.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n    this.clearGrid = this.clearGrid.bind(this);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.getInitialGrid = this.getInitialGrid.bind(this);\r\n    this.createNode = this.createNode.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  }\r\n\r\n  handleSelect(eventKey) {\r\n    this.setState({\r\n      algorithm: eventKey,\r\n    });\r\n  }\r\n\r\n  handleMouseDown(e) {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    const [row, col] = e.target.id.split(\"-\").slice(1);\r\n    if (row == this.state.startRow && col == this.state.startCol) {\r\n      this.setState({\r\n        isMovingStart: true,\r\n      });\r\n    }\r\n\r\n    if (row == this.state.endRow && col == this.state.endCol) {\r\n      this.setState({\r\n        isMovingEnd: true,\r\n      });\r\n    }\r\n    this.setState({ mouseDown: true, isClearingWalls: false });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    this.setState({\r\n      mouseDown: false,\r\n      isClearingWalls: false,\r\n      isMovingStart: false,\r\n      isMovingEnd: false,\r\n    });\r\n\r\n    let startRow = this.state.startRow,\r\n      startCol = this.state.startCol,\r\n      endRow = this.state.endRow,\r\n      endCol = this.state.endCol;\r\n\r\n    const newGrid = this.state.grid.slice();\r\n    for (let ref in this.refs) {\r\n      const { row, col, isStart, isEnd } = this.refs[ref].state;\r\n      newGrid[row][col] = this.refs[ref].state;\r\n      startRow = isStart ? row : startRow;\r\n      startCol = isStart ? col : startCol;\r\n      endRow = isEnd ? row : endRow;\r\n      endCol = isEnd ? col : endCol;\r\n    }\r\n\r\n    this.setState({\r\n      grid: newGrid,\r\n      startRow,\r\n      startCol,\r\n      endRow,\r\n      endCol,\r\n    });\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isRunning) return;\r\n    if (this.state.mouseDown) {\r\n      this.handleMouseUp();\r\n    }\r\n  }\r\n\r\n  // Creating an initial grid\r\n  getInitialGrid() {\r\n    const grid = [];\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n      const cur = [];\r\n\r\n      for (let col = 0; col < 50; col++) {\r\n        cur.push(this.createNode(row, col));\r\n      }\r\n\r\n      grid.push(cur);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  // Creating each node\r\n  createNode(row, col) {\r\n    const { startRow, startCol, endRow, endCol } = this.state;\r\n    let node = {\r\n      row,\r\n      col,\r\n      isStart: row === startRow && col === startCol,\r\n      isEnd: row === endRow && col === endCol,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      mouseDown: false,\r\n      distanceToFinishNode: (endRow - row) ** 2 + (endCol - col) ** 2,\r\n    };\r\n\r\n    if (typeof startRow !== \"undefined\") {\r\n      node.isStart = row === startRow && col === startCol;\r\n      node.isEnd = row === endRow && col === endCol;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  clearBoard() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    const { startRow, startCol, endRow, endCol, isRunning } = this.state;\r\n    const newGrid = this.getInitialGrid();\r\n    this.setState({ isClearingWalls: true, grid: newGrid });\r\n  }\r\n\r\n  runPathfinder() {\r\n    if (this.state.isRunning) return;\r\n    this.clearGrid();\r\n    this.toggleIsRunning();\r\n    const { algorithm, startRow, startCol, endRow, endCol, grid } = this.state;\r\n    const startNode = grid[startRow][startCol],\r\n      endNode = grid[endRow][endCol];\r\n    let visitedNodes;\r\n\r\n    switch (algorithm) {\r\n      case \"1\":\r\n        visitedNodes = dijkstra(startNode, endNode, grid);\r\n        break;\r\n      case \"2\":\r\n        visitedNodes = astar(startNode, endNode, grid);\r\n        break;\r\n      case \"3\":\r\n        visitedNodes = dfs(startNode, endNode, grid);\r\n        break;\r\n      case \"4\":\r\n        visitedNodes = bfs(startNode, endNode, grid);\r\n        break;\r\n      default:\r\n    }\r\n\r\n    const shortestPath = this.getShortestPath(endNode);\r\n    shortestPath.push(\"end\");\r\n    this.animate(visitedNodes, shortestPath);\r\n  }\r\n\r\n  getShortestPath(endNode) {\r\n    const shortestPath = [];\r\n    let cur = endNode;\r\n    while (cur !== null) {\r\n      shortestPath.unshift(cur);\r\n      cur = cur.previousNode;\r\n    }\r\n    return shortestPath;\r\n  }\r\n\r\n  animate(visitedNodes, shortestPath) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className;\r\n        if (\r\n          nodeClassName !== \"node node-start\" &&\r\n          nodeClassName !== \"node node-end\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      if (shortestPath[i] === \"end\") {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 40);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = shortestPath[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-end\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path\";\r\n          }\r\n        }, i * 30);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const { startRow, startCol, endRow, endCol } = this.state;\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-end\" &&\r\n            nodeClassName !== \"node node-wall\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node\";\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              (this.state.endRow - node.row) ** 2 +\r\n              (this.state.endCol - node.col) ** 2;\r\n          }\r\n          if (nodeClassName === \"node node-end\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n            node.previousNode = null;\r\n            node.distance = Infinity;\r\n          }\r\n          if (nodeClassName === \"node node-start\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              (this.state.endRow - node.row) ** 2 +\r\n              (this.state.endCol - node.col) ** 2;\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      mouseDown,\r\n      isClearingWalls,\r\n      isMovingStart,\r\n      isMovingEnd,\r\n      isRunning,\r\n      algorithm,\r\n    } = this.state;\r\n\r\n    const algoKeys = {\r\n      \"1\": \"Dijkstra's\",\r\n      \"2\": \"A-star\",\r\n      \"3\": \"Depth-first search\",\r\n      \"4\": \"Breadth-first search\",\r\n    };\r\n\r\n    const algo = algoKeys[algorithm];\r\n\r\n    return (\r\n      <div\r\n        onMouseUp={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseUp();\r\n        }}\r\n        onMouseDown={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseDown(e);\r\n        }}\r\n        onMouseLeave={(e) => {\r\n          e.preventDefault();\r\n          this.handleMouseLeave();\r\n        }}\r\n      >\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand>\r\n            <img\r\n              alt=\"\"\r\n              src={pathImg}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{\" \"}\r\n            Pathfinding algorithm visualizer\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <NavDropdown\r\n                variant=\"Info\"\r\n                title=\"Algorithm\"\r\n                id=\"basic-nav-dropdown\"\r\n                onSelect={(eventKey) => {\r\n                  this.handleSelect(eventKey);\r\n                }}\r\n              >\r\n                <NavDropdown.Item eventKey=\"1\">Dijkstra's</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"2\">A*</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"3\">\r\n                  Depth-first search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"4\">\r\n                  Breadth-first search\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n\r\n              <Button variant=\"info\" onClick={this.runPathfinder}>\r\n                Run -> {algo}\r\n              </Button>\r\n              <Button onClick={this.clearBoard} variant=\"outline-danger\">\r\n                Clear walls and board\r\n              </Button>\r\n\r\n              <Button onClick={this.clearGrid} variant=\"outline-warning\">\r\n                Clear board\r\n              </Button>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <table className=\"grid\">\r\n          <tbody>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      row,\r\n                      col,\r\n                      isEnd,\r\n                      isStart,\r\n                      isWall,\r\n                      isVisited,\r\n                      distance,\r\n                      previousNode,\r\n                    } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        row={row}\r\n                        col={col}\r\n                        isEnd={isEnd}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        isVisited={isVisited}\r\n                        mouseDown={mouseDown}\r\n                        distance={distance}\r\n                        previousNode={previousNode}\r\n                        ref={row + \":\" + col}\r\n                        isClearingWalls={isClearingWalls}\r\n                        isMovingStart={isMovingStart}\r\n                        isMovingEnd={isMovingEnd}\r\n                        isRunning={isRunning}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n","import React from \"react\";\r\nimport \"./css/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Visualizer from \"./components/visualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Visualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}